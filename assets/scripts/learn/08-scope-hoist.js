// --------------------------------------
// 스코프(Scope)
// - 코드 영역(범위)
// - 전역(전체 영역: global scope)
// - 지역(일부 영역: local scope)
// 
// 호이스트(Hoist)
// - 무엇을 끌어올리나?
// - [ 함수 선언 ]을 [ 코드 작성 영역의 최상단 ]으로 끌어올린다.
// - [ var 변수 선언 ]을 [ 코드 작성 영역의 최상단 ]으로 끌어올린다.
// --------------------------------------

// 호이스트(Function Hoist)Add commentMore actions
// - 사람들이 현상(벌어진 일)만 보고 그 느낌을 표현한 말에 불과
//
// - 컴퓨터(JavaScript 엔진 관점): 
//   코드 스캔 후, 함수 선언을 먼저 메모리에 등록한다. 
//   그리고 코드를 처리한다.
// 
// - 인간(개발자 관점): 
//   "작성된 순서대로 코드가 실행될 것이다."

// 선언된 함수는 코드를 작성하는 영역의 
// 가장 상위로 끌어올려진 것처럼 작동된다.
// 함수()

// 함수 선언(Function Declaration)
// 컴퓨터 메모리에 함수가 기억된다.
// function 함수() {
//   console.log('함수가 실행되었어요!')
// }

// 함수 실행
// 컴퓨터 메모리에 기억된 함수 이름을 통해 코드를 실행한다.


// --------------------------------------
// var 변수 호이스트 현상
// --------------------------------------

// var 변수 선언
// console.log(1, 마이네임) // ERROR or Log?

// var 마이네임 = '꼬리'

// console.log(2, 마이네임)

// 변수 선언 호이스트
// 마치 호이스트(끌어올려진 것)처럼 보여요.
// 예측된 결과

// var 변수 선언은 마치 끌어올려진 것처럼 보이는데
// 선언부만 끌어올려진 것처럼 작동한다.
// var 마이네임 // undefined

// console.log(마이네임)

// 마이네임 = '꼬리'


// --------------------------------------
// let 변수 선언 호이스트 현상이 일어날까? - 아니오!
// --------------------------------------

console.log(1, 마이네임)

// let 변수 선언
// let 마이네임 = '꼬리'

// const 상수 선언
const 마이네임 = '꼬리'

console.log(2, 마이네임)


// 호이스트 현상을 잘 이용하면 코드의 실행 흐름을 깔끔하게 유추할 수 있다.


// --------------------------------------
// 함수를 만드는 2가지 방법
// --------------------------------------
// 1. 함수 선언(Function Declaration) - function 키워드로 시작, 호이스트 현상 ✅
// 2. 함수 표현식(Function Expression) - 변수에 함수 값을 할당, JS는 함수를 값으로 취급, 호이스트 현상 ❌
// --------------------------------------

// 변수 선언
// let 보다

// 함수 선언, 함수 표현식 그리고 호이스트 현상 비교
// 보다('공무원님')
look('선생님')
// 보다('형사님')

// 함수 선언
function look(who) {
  console.log(who + '를(을) 보다')
}

// 함수 (표현)식
// 자바스크립트는 함수를 값(value)으로 취급
// let 변수 = 값 (할당)
// let 보다 = 'see' // string
// let 보다 = 1001 // number
// let 보다 = ture // boolean
// let 변수 = 함수
let 보다 = function(누구) {
  console.log(누구 + '를(을) 보다')
}

// 보다('공무원님')
// look('선생님')
// 보다('형사님')